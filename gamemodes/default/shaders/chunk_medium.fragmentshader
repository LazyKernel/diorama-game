#version 330

uniform sampler2D diffuse_map;
uniform sampler2D ambient_map;
//uniform sampler2DShadow shadow_map;
uniform sampler2D shadow_map;
uniform mat4 depth_bias_mvp_matrix;

uniform vec4 ambient_color;

in vec2 final_uv;
in vec4 light_rgba;
in vec2 ambient_uv;
in vec4 shadow_coord;
flat in vec3 normal_obj;
in float cos_theta;
// in vec4 Position_worldspace;

out vec4 color;

vec2 poissonDisk [16] = vec2 []
( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

float random (vec3 seed, int i)
{
    vec4 seed4 = vec4 (seed, i);
    float dot_product = dot (seed4, vec4 (12.9898,78.233,45.164,94.673));
    return fract (sin (dot_product) * 43758.5453);
}

void main()
{
    //color = texture (diffuse_map, final_uv).rgba;
    vec4 diffuse_color = texture (diffuse_map, final_uv).rgba;
    if (diffuse_color.a < 1.0)
    {
        discard;
    }

    // float bias = 4.0 * tan (acos (cos_theta)); // cosTheta is dot( n,l ), clamped between 0 and 1
    // bias = clamp (bias, 0, 4.0);

    float bias = 0.001;

    vec4 shadow_grid_pos = shadow_coord;
    vec4 shadow_grid_pos2= shadow_coord;
    const float snapScale = 16;

    vec3 pco0 = vec3 (vec2 (0.004), 0.);
    vec3 pco1 = vec3(vec2(0.504), 0.);
    vec3 pco02 = vec3(vec2(0.001), 0.);
    vec3 pco12 = vec3(vec2(0.499), 0.);


    //vec3 pco0 = vec3(vec2(0.004), 0.);
    // vec3 pco1 = vec3(vec2(0.504), 0.);
    // vec3 pco02 = vec3(vec2(0.001), 0.);
    // vec3 pco12 = vec3(vec2(0.499), 0.);

// HAHAHAH ROB good luck untangling this shit lol. It works tho.
// its organic code growth so i don't even remember how i got exactly there.
// also have fun optimizing
    shadow_grid_pos.xyz += normal_obj * 0.1;

    shadow_grid_pos.xyz = (1. / snapScale) * (floor(shadow_grid_pos.xyz * snapScale + pco0 )- pco1);
    shadow_grid_pos2.xyz= (1. / snapScale) * (ceil(shadow_grid_pos2.xyz * snapScale + pco0 ) - pco1);

    shadow_grid_pos.xyz += normal_obj * 0.1;
    shadow_grid_pos2.xyz += normal_obj * 0.1;

    shadow_grid_pos = depth_bias_mvp_matrix * shadow_grid_pos;
    shadow_grid_pos2 = depth_bias_mvp_matrix * shadow_grid_pos2;
    //shadow_grid_pos.xyz = shadow_grid_pos.xyz / shadow_grid_pos.w;

    float visibility = 1.0;

    float depth = texture (shadow_map, shadow_grid_pos.xy).r;
    float depth2 = texture (shadow_map, shadow_grid_pos2.xy).r;
    if (depth < shadow_grid_pos.z - bias)
    {
      visibility -= 0.4;
    }
    if (depth2 < shadow_grid_pos2.z - bias) {
      visibility -= 0.4;
    }
    
//    for (int i = 0; i < 4; ++i)
//    {
//        // int index = i;
//        int index = int (16.0 * random (gl_FragCoord.xyy, i)) % 16;
//        // int index = int (16.0 * random (floor (Position_worldspace.xyz * 1000.0), i)) % 16;
//
//        float depth = texture (shadow_map, shadow_coord.xy + poissonDisk [index] / 5000.0 ).r;
//	 depth = texture (shadow_map, shadow_grid_pos.xy).r;
//        if (depth < shadow_grid_pos.z - bias )
//        {
//            visibility -= 0.2;
//        }
//    }


    // float bias = 0.001;
    // float visibility = texture (shadow_map, vec3 (shadow_coord.xy, shadow_coord.z / shadow_coord.w), bias);
    // float visibility = texture (shadow_map, vec3 (shadow_coord.xy, 1.0), shadow_coord.z + bias);

    // float visibility = texture (shadow_map, vec3 (shadow_coord.xy, (shadow_coord.z - bias) / shadow_coord.w));

    // float depth = texture (shadow_map, shadow_coord.xy).r;
    // float visibility = 0.8;
    // if (depth < shadow_coord.z - bias)
    // {
    //     visibility = 0.2;
    // }

    color = diffuse_color * (ambient_color + (light_rgba * visibility));
    color.a = 1.0;
}
